<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

function nci_user_roles_install() {
    
}

function nci_user_roles_uninstall() {
    
}

function nci_user_roles_enable() {
    
}

function nci_user_roles_disable() {
    
}

function nci_user_roles_set_permissions(){
    $role_map = nci_user_roles_get_defaults();
    $role_permissions = nci_user_roles_prepare_permissions($role_map);

    nci_user_roles_update_roles($role_permissions);
}

function nci_user_roles_get_defaults() {
    return array(
        'anonymous user' => 'get_anonymous_user_permissions',
        'authenticated user' => 'get_authenticated_user_permissions',
        'content editor' => 'get_content_editor_permissions',
        'content approver' => 'get_content_approver_permissions',
        'site moderator' => 'get_site_moderator_permissions',
        'advanced content editor' => 'get_advanced_content_editor_permissions',
        'site manager' => 'get_site_manager_permissions',
    );
}

/**
 * Generates the permissions allowed for the anonymous user
 * 
 * @return array a keyed array of module name => permission => value
 */
function get_anonymous_user_permissions() {
    return array(
        'access comments' => true,
        'access content' => true,
        'search content' => true,
        'use advanced search' => true,
    );
}

function get_authenticated_user_permissions() {
    $perms = get_anonymous_user_permissions();
    $perms += array(
        'post comments' => true,
        'edit own comments' => true,
        'use text format filtered_html' => true,
    );
    
    return $perms;
}

function get_content_editor_permissions() {
    $perms = get_authenticated_user_permissions();
    $perms += array(
        'use text format full_html' => TRUE,
        'create url aliases' => TRUE,
        'administer redirects' => TRUE,
        'access relations' => TRUE,
        'create relations' => TRUE,
        'edit relations' => TRUE,
        'delete relations' => TRUE,
        'access administration pages' => TRUE,
        'view the administration theme' => TRUE,
        'access toolbar' => TRUE,
        'access workbench' => TRUE,
        'access workbench access by role' => TRUE,
        'view workbench access information' => TRUE,
        'view all unpublished content' => TRUE,
        'view moderation history' => TRUE,
        'view moderation messages' => TRUE,
        /*'use workbench moderation my drafts tab' => TRUE,
        'use workbench moderation needs review tab' => TRUE,
        'moderate content from draft to needs_review' => TRUE,
        'moderate content from needs_review to draft' => TRUE,
        'moderate content from published to draft' => TRUE,
        'moderate content from private archive to draft' => TRUE,*/
        'access content overview' => TRUE,
        'view own unpublished content' => TRUE,
        'view revisions' => TRUE,
        'revert revisions' => TRUE,
        /*'create general content' => TRUE, // Grant permission
        'edit any general content' => TRUE, // Grant permission
        'create site home content' => TRUE,
        'edit any site home content' => TRUE,
        'create portal content' => TRUE,
        'edit any portal content' => TRUE,
        'create event content' => TRUE,
        'edit any event content' => TRUE,
        'create news article content' => TRUE,
        'edit any news article content' => TRUE,
        'create aggregator content' => TRUE,
        'edit any aggregator content' => TRUE,
        'create citation content' => TRUE,
        'edit any citation content' => TRUE,
        'create list content' => TRUE,
        'edit any list content' => TRUE,
        'create content block content' => TRUE,
        'edit any content block content' => TRUE,
        'create content carousel content' => TRUE,
        'edit any content carousel content' => TRUE,
        'create content carousel item content' => TRUE,
        'edit any content carousel item content' => TRUE,
        'create image content' => TRUE,
        'edit any image content' => TRUE,
        'create audio content' => TRUE,
        'edit any audio content' => TRUE,
        'create external link content' => TRUE,
        'edit any external link content' => TRUE,
        'create file content' => TRUE,
        'edit any file content' => TRUE,
        'create highlighted content content' => TRUE,
        'edit any highlighted content content' => TRUE,
        'create audio content' => TRUE,
        'edit any audio content' => TRUE,*/
    );
    return $perms;
}

function get_content_approver_permissions() {
    $perms = get_content_editor_permissions();
    
    $perms += array(
        /*'moderate all content from draft to archive' => TRUE,
        'moderate all content from review to published' => TRUE,
        'moderate all content from published to private archive' => TRUE,*/
    );

    return $perms;
}

function get_site_moderator_permissions() {
    $perms = get_content_approver_permissions();
    $perms += array(
        'access all webform results' => TRUE,
        'administer comments' => TRUE,
        'administer users' => TRUE,
    );

    return $perms;
}

function get_advanced_content_editor_permissions() {
    $perms = get_site_moderator_permissions();
    $perms += array(
        'administer blocks' => true,
        'administer menu' => true,
        'administer taxonomy' => true,
        'administer views' => true,
        'administer nodes' => true,
        'administer url aliases' => true,
        'display site building menu' => true,
        'display site configuration menu' => true,
        /*'create general content' => TRUE, // Grant permission
        'delete any general content' => TRUE, // Grant permission
        'create site home content' => TRUE,
        'delete any site home content' => TRUE,
        'create portal content' => TRUE,
        'delete any portal content' => TRUE,
        'create event content' => TRUE,
        'edit any event content' => TRUE,
        'create news article content' => TRUE,
        'edit any news article content' => TRUE,
        'create aggregator content' => TRUE,
        'edit any aggregator content' => TRUE,
        'create citation content' => TRUE,
        'edit any citation content' => TRUE,
        'create list content' => TRUE,
        'edit any list content' => TRUE,
        'create content block content' => TRUE,
        'edit any content block content' => TRUE,
        'create content carousel content' => TRUE,
        'edit any content carousel content' => TRUE,
        'create content carousel item content' => TRUE,
        'edit any content carousel item content' => TRUE,
        'create image content' => TRUE,
        'edit any image content' => TRUE,
        'create audio content' => TRUE,
        'edit any audio content' => TRUE,
        'create external link content' => TRUE,
        'edit any external link content' => TRUE,
        'create file content' => TRUE,
        'edit any file content' => TRUE,
        'create highlighted content content' => TRUE,
        'edit any highlighted content content' => TRUE,
        'create audio content' => TRUE,
        'edit any audio content' => TRUE,*/
    );

    return $perms;
}

function get_site_manager_permissions() {
    $perms = get_advanced_content_editor_permissions();
    
    $perms += array(
        
    );
    
    return $perms;
}

/**
 * Utility function for creating a role and defining its permissions safely.
 * 
 * @param array $role_map         Array in the form of role_name => 
 *                                permission_name => permission_value or
 *                                role_name => function_name, where the function
 *                                return a list of permission / value pairs.
 */
function nci_user_roles_update_roles(array $role_map) {
    $known_permissions = nci_user_roles_get_permissions();
    
    foreach ($role_map as $role_name => $permissions) {
        // load the role if it exists
        $role = user_role_load_by_name($role_name);
        if (!$role) {
            // else, create the role
            $role = new stdClass();
            $role->name = $role_name;
            user_role_save($role);

            // Role to grant the permissions to
            $role = user_role_load_by_name($role_name);
        }
        // retrieve the role id
        $rid = $role->rid;

        // intersect the desired permissions with actual permissions
        $good_perms = array_intersect_key($permissions, $known_permissions);
        
        // get the permissions already set for the role
        $set_perms = user_role_permissions(array($rid));
        
        // pull specific role permissions
        if(isset($set_perms[$rid])) {
            $set_perms = $set_perms[$rid];
        }
        else
            $set_perms = array();
        
        // break out the unset permissions
        $unset_perms = array_diff_key($good_perms, $set_perms);
        
        // pass the valid permissions along to clear the outlying permissions
        nci_user_roles_clear_permissions(array($role_name), $good_perms);

        // find the permissions to clear (e. g. the ones that are set that are
        // not in the desired list)
        $bad_perms = array_diff_key($set_perms, $good_perms);
        if (!empty($bad_perms)) {
            //$diff = array_keys();
            $reject_list = implode("\n", $bad_perms);
            //$pass_list = implode("\n", array_keys($good_permissions));
            drupal_set_message(
                    "Cannot set some permissions for $role_name.\nREJECTED:\n$reject_list\n", 'warning');
        }

        // Grant permissions to the role
        user_role_change_permissions($rid, $good_perms);
        drupal_set_message("Updated roles for role $role_name");
    }
}

/**
 * Utility function for checking the given permissions (whether arrays or
 * functions) and handling the hook calls.
 * 
 * @param array $role_map         Array in the form of role_name => 
 *                                permission_name => permission_value or
 *                                role_name => function_name, where the function
 *                                return a list of permission / value pairs.
 */
function nci_user_roles_prepare_permissions(array $role_map) {
    $retrieved_perms = array();
    foreach ($role_map as $role_name => $permission_src) {
        // check inputs
        // ensure role name is a string
        if (!is_string($role_name)) {
            drupal_set_message("Cannot use $role_name as a user role.", 'warning');
            continue;
        }
        // call the source if it is a defined function
        $role_permissions = $permission_src;
        if (is_string($permission_src) && function_exists($permission_src)) {
            $role_permissions = $permission_src();
        }
        // if the source or returned values are not an array, fail
        if (!(is_array($role_permissions))) {
            drupal_set_message(
                    "Cannot use $role_permissions as permissions for role $role_name.", 'warning');
            continue;
        }
        
        $retrieved_perms[$role_name] = $role_permissions;
    }
    
    // next, pass this array around to hooked-on modules
    $returned_perms = module_invoke_all('role_permissions', $retrieved_perms);
    $current_perms = array_merge_recursive($retrieved_perms, $returned_perms);
    
    // retrieve updated inheritances
    /*$base_inherits = nci_user_roles_get_base_inherits();
    $module_inherits = module_invoke_all('role_inheritance');
    $new_inherits = array_merge_recursive($base_inherits, $inheritances);
    
    $inherit_order = array_reduce($new_inherits, '_flatten_inherits', array());*/
    
    return $current_perms;
}

function nci_user_roles_get_base_inherits(){
    return array(
        'anonymous user' => array(),
        'authenticated user' => array(
            'anonymous user' => 'anonymous user',
        ),
        'content editor' => array(
            'anonymous user' => 'anonymous user',
            'authenticated user' => 'authenticated user',
        )
    );
}

function _create_content_editor() {
    $editor_role = user_role_load_by_name('content editor');
    if (!$editor_role) {
        $role = new stdClass();
        $role->name = 'content editor';
        user_role_save($role);

        // Role to grant the permissions to
        $editor_role = user_role_load_by_name('content editor');
    }
    $editor_rid = $editor_role->rid;
    // Define our 'editor' role permissions
    $editor_permissions = get_content_editor_permissions();
    // Grant permissions to our 'editor' role
    user_role_change_permissions($editor_rid, $editor_permissions);
}

function _create_content_approver() {
    $role = new stdClass();
    $role->name = 'content approver';
    // $role->weight = 10;
    user_role_save($role);
}

function _create_site_moderator() {
    $role = new stdClass();
    $role->name = 'site moderator';
    // $role->weight = 10;
    user_role_save($role);
}

function _create_advanced_content_editor() {
    $role = new stdClass();
    $role->name = 'advanced content editor';
    // $role->weight = 10;
    user_role_save($role);
}

function _create_site_manager() {
    $role = new stdClass();
    $role->name = 'site manager';
    // $role->weight = 10;
    user_role_save($role);
}

/**
 * Clears all permissions for the provided user roles.  Rejects the admin role 
 * if provided.
 * 
 * @param array $roles      Clears the permissions of the role names contained 
 *                          in this array, or leave empty for all
 * @param array $whitelist  Array of permissions to not modify
 */
function nci_user_roles_clear_permissions(array $roles = array(), array $whitelist = array()) {
    if(empty($roles)) $roles = user_roles();
    
    foreach ($roles as $role_name) {
        if ($role_name == 'administrator')
            continue;

        $role = user_role_load_by_name($role_name);
        if ($role) {
            $rid = $role->rid;

            $permissions = user_role_permissions(array($rid => $rid));
            
            $role_perms = $permissions[$rid];
            
            // deduct the whitelist from the permissions found
            //drupal_set_message("$role_name permissions - " . implode(', ', array_keys($role_perms)) . "\n");
            //drupal_set_message("$role_name whitelist - " . implode(', ', array_keys($whitelist)) . "\n");
            
            $remainder_perms = array_diff_key($role_perms, $whitelist);
            
            //drupal_set_message("$role_name remainder - " . implode(', ', array_keys($remainder_perms)) . "\n");
            
            $permission_names = array_keys($remainder_perms);
            
            if(empty($permission_names)) {
                //drupal_set_message("$role_name: no permissions to clear.");
                continue;
            }

            drupal_set_message("$role_name: CLEARING PERMISSIONS: " .
                    implode(', ', $permission_names));
            
            // clear EVERYTHING not whitelisted.
            user_role_revoke_permissions($rid, $permission_names);
        }
    }
}

function nci_user_roles_init() {
    //$permissions = nci_user_roles_get_permissions();
    
    //dsm($permissions, 'module permissions');
}

function nci_user_roles_get_permissions() {
    $module_permissions = array();
    foreach (module_list(FALSE, FALSE, TRUE) as $module) {
        if ($permissions = module_invoke($module, 'permission')) {
            foreach ($permissions as $permission => $parameters) {
                $module_permissions[$permission] = $parameters;
                $module_permissions[$permission]['module'] = $module;
            }
        }
    }

    return $module_permissions;
}

/**
 * Builds an array of content type permissions, given an array of types and
 * access levels desired
 * 
 * @param array $types  An array of content type names
 * @param array $access An array of desired access, denoted by the terms
 *                      'edit own', 'edit any', 'delete own', delete any', and
 *                      'create'
 * @return array        An array of the desired type permissions
 */
function nci_user_roles_build_content_type_permissions(array $types,
        array $access_levels) {
    $type_perms = array();
    foreach($types as $type) {
        foreach($access_levels as $level) {
            $perm_string = '';
            switch ($level) {
                case 'edit own':
                case 'edit any':
                case 'delete own':
                case 'delete any':
                case 'create':
                    $perm_string = "$level $type content";

                    break;
                default:
                    continue;
            }
            
            $type_perms[$perm_string] = true;
        }
    }
    
    return $type_perms;
}

/**
 * Builds an array of content type permissions, given an array of types and
 * access levels desired
 * 
 * @param array $types  An array of content type names
 * @param array $access An array of desired access, denoted by the terms
 *                      'edit own', 'edit any', 'delete own', delete any', and
 *                      'create'
 * @return array        An array of the desired type permissions
 */
function nci_user_roles_build_taxonomy_permissions(array $vocabs,
        array $access_levels) {
    $type_perms = array();
    foreach($vocabs as $vocab_name) {
        // attempt to lookup the given vocabulary
        $vocab = taxonomy_vocabulary_machine_name_load($vocab_name);
        
        if(!$vocab) {
            drupal_set_message("Cannot load vocabulary $vocab_name.", 'warning');
            continue;
        }
        
        $vid = $vocab->vid;
        
        foreach($access_levels as $level) {
            $perm_string = '';
            switch ($level) {
                case 'edit':
                case 'delete':
                    $perm_string = "$level terms in $vid";

                    break;
                default:
                    continue;
            }
            
            $type_perms[$perm_string] = true;
        }
    }
    
    return $type_perms;
}

function nci_user_roles_modules_enabled($modules) {
    nci_user_roles_set_permissions();
}

?>
